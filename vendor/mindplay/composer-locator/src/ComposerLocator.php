<?php

## FILE GENERATED by mindplay/composer-locator @ 2019-10-17 15:49:12
##
## This file will be auto-generated and overwritten at installation.

abstract class ComposerLocator
{
    /**
     * @var string[] map where Composer vendor/package name => package path (relative to project root path)
     */
    private static $paths = array ( 'lea/is-learning-phpunit' => '', 'clue/stream-filter' => '/vendor/clue/stream-filter', 'dealerdirect/phpcodesniffer-composer-installer' => '/vendor/dealerdirect/phpcodesniffer-composer-installer', 'doctrine/annotations' => '/vendor/doctrine/annotations', 'doctrine/instantiator' => '/vendor/doctrine/instantiator', 'doctrine/lexer' => '/vendor/doctrine/lexer', 'foxy/foxy' => '/vendor/foxy/foxy', 'guzzlehttp/psr7' => '/vendor/guzzlehttp/psr7', 'hamcrest/hamcrest-php' => '/vendor/hamcrest/hamcrest-php', 'jakub-onderka/php-console-color' => '/vendor/jakub-onderka/php-console-color', 'jakub-onderka/php-console-highlighter' => '/vendor/jakub-onderka/php-console-highlighter', 'jakub-onderka/php-parallel-lint' => '/vendor/jakub-onderka/php-parallel-lint', 'jeremeamia/superclosure' => '/vendor/jeremeamia/superclosure', 'knplabs/github-api' => '/vendor/knplabs/github-api', 'mindplay/composer-locator' => '/vendor/mindplay/composer-locator', 'mockery/mockery' => '/vendor/mockery/mockery', 'myclabs/deep-copy' => '/vendor/myclabs/deep-copy', 'nikic/php-parser' => '/vendor/nikic/php-parser', 'pdepend/pdepend' => '/vendor/pdepend/pdepend', 'phar-io/manifest' => '/vendor/phar-io/manifest', 'phar-io/version' => '/vendor/phar-io/version', 'php-di/invoker' => '/vendor/php-di/invoker', 'php-di/php-di' => '/vendor/php-di/php-di', 'php-di/phpdoc-reader' => '/vendor/php-di/phpdoc-reader', 'php-http/cache-plugin' => '/vendor/php-http/cache-plugin', 'php-http/client-common' => '/vendor/php-http/client-common', 'php-http/curl-client' => '/vendor/php-http/curl-client', 'php-http/discovery' => '/vendor/php-http/discovery', 'php-http/httplug' => '/vendor/php-http/httplug', 'php-http/message' => '/vendor/php-http/message', 'php-http/message-factory' => '/vendor/php-http/message-factory', 'php-http/promise' => '/vendor/php-http/promise', 'phpcompatibility/php-compatibility' => '/vendor/phpcompatibility/php-compatibility', 'phpdocumentor/reflection-common' => '/vendor/phpdocumentor/reflection-common', 'phpdocumentor/reflection-docblock' => '/vendor/phpdocumentor/reflection-docblock', 'phpdocumentor/type-resolver' => '/vendor/phpdocumentor/type-resolver', 'phpmd/phpmd' => '/vendor/phpmd/phpmd', 'phpspec/prophecy' => '/vendor/phpspec/prophecy', 'phpunit/php-code-coverage' => '/vendor/phpunit/php-code-coverage', 'phpunit/php-file-iterator' => '/vendor/phpunit/php-file-iterator', 'phpunit/php-text-template' => '/vendor/phpunit/php-text-template', 'phpunit/php-timer' => '/vendor/phpunit/php-timer', 'phpunit/php-token-stream' => '/vendor/phpunit/php-token-stream', 'phpunit/phpunit' => '/vendor/phpunit/phpunit', 'psr/cache' => '/vendor/psr/cache', 'psr/container' => '/vendor/psr/container', 'psr/http-message' => '/vendor/psr/http-message', 'ralouphie/getallheaders' => '/vendor/ralouphie/getallheaders', 'sebastian/code-unit-reverse-lookup' => '/vendor/sebastian/code-unit-reverse-lookup', 'sebastian/comparator' => '/vendor/sebastian/comparator', 'sebastian/diff' => '/vendor/sebastian/diff', 'sebastian/environment' => '/vendor/sebastian/environment', 'sebastian/exporter' => '/vendor/sebastian/exporter', 'sebastian/finder-facade' => '/vendor/sebastian/finder-facade', 'sebastian/global-state' => '/vendor/sebastian/global-state', 'sebastian/object-enumerator' => '/vendor/sebastian/object-enumerator', 'sebastian/object-reflector' => '/vendor/sebastian/object-reflector', 'sebastian/phpcpd' => '/vendor/sebastian/phpcpd', 'sebastian/recursion-context' => '/vendor/sebastian/recursion-context', 'sebastian/resource-operations' => '/vendor/sebastian/resource-operations', 'sebastian/type' => '/vendor/sebastian/type', 'sebastian/version' => '/vendor/sebastian/version', 'slevomat/coding-standard' => '/vendor/slevomat/coding-standard', 'squizlabs/php_codesniffer' => '/vendor/squizlabs/php_codesniffer', 'symfony/config' => '/vendor/symfony/config', 'symfony/console' => '/vendor/symfony/console', 'symfony/dependency-injection' => '/vendor/symfony/dependency-injection', 'symfony/filesystem' => '/vendor/symfony/filesystem', 'symfony/finder' => '/vendor/symfony/finder', 'symfony/options-resolver' => '/vendor/symfony/options-resolver', 'symfony/polyfill-ctype' => '/vendor/symfony/polyfill-ctype', 'symfony/polyfill-mbstring' => '/vendor/symfony/polyfill-mbstring', 'symfony/polyfill-php56' => '/vendor/symfony/polyfill-php56', 'symfony/polyfill-php73' => '/vendor/symfony/polyfill-php73', 'symfony/polyfill-util' => '/vendor/symfony/polyfill-util', 'symfony/process' => '/vendor/symfony/process', 'symfony/service-contracts' => '/vendor/symfony/service-contracts', 'theseer/fdomdocument' => '/vendor/theseer/fdomdocument', 'theseer/tokenizer' => '/vendor/theseer/tokenizer', 'webmozart/assert' => '/vendor/webmozart/assert', 'zooroyal/coding-standard' => '/vendor/zooroyal/coding-standard', );

    /**
     * @param string $name Composer vendor/package name
     *
     * @return string absolute root path to package installation folder
     *
     * @throws RuntimeException if the specific package is not installed
     */
    public static function getPath($name)
    {
        $name = strtolower($name);

        if (! isset(static::$paths[$name])) {
            throw new RuntimeException("Composer package not found: {$name}");
        }

        return static::getRootPath() . static::$paths[$name];
    }

    /**
     * @return string absolute root path of Composer project
     */
    public static function getRootPath()
    {
        return dirname(dirname(dirname(dirname(__DIR__))));
    }
    
    /**
     * @param string $name Composer vendor/package name
     *
     * @return bool true, if the given package is installed
     */
    public static function isInstalled($name)
    {
        return isset(static::$paths[$name]);
    }

    /**
     * @return string[] list of "vendor/package" names
     */
    public static function getPackages()
    {
        return array_keys(static::$paths);
    }

    /**
     * @return string[] map where Composer vendor/package name => absolute root path
     */
    public static function getPaths()
    {
        $paths = [];
        
        foreach (static::$paths as $name => $path) {
            $paths[$name] = static::getRootPath() . $path;
        }
        
        return $paths;
    }
}
